import numpy as np
linalg = np.linalg
import sympy as smp
import time
st = time.time()

def independentCols(matrix):
	
	"""
	independentRows=[]
	for i in range(matrix.shape[0]):
		for j in range(matrix.shape[0]):
			if i != j:
				inner_product = np.inner(
					matrix[:,i],
					matrix[:,j]
				)
				norm_i = np.linalg.norm(matrix[:,i])
				norm_j = np.linalg.norm(matrix[:,j])

				print 'I: ', matrix[:,i]
				print 'J: ', matrix[:,j]
				print 'Prod: ', inner_product
				print 'Norm i: ', norm_i
				print 'Norm j: ', norm_j
				if np.abs(inner_product - norm_j * norm_i) < 1E-5:
					print 'Dependent'
				else:
					print 'Independent'
	"""
	matrix=smp.Matrix(matrix)
	"""
	tol=0
	R=sp.linalg.qr(matrix)[1]
	independentRows=np.where(abs(np.sum(R,1))>tol)
	"""
	independentCols=matrix.rref()[1]
	return independentCols
	

def independentRows(A, tol = 1e-5):

    Q, R = linalg.qr(A)
    independent = np.where(np.abs(R.diagonal()) > tol)[0]
    return independent

def matrixrank(A,tol=1e-8):
    s = linalg.svd(A,compute_uv=0)
    return sum( np.where( s>tol, 1, 0 ) )
    
A = np.array([[0.04525000000000004, 0.85975000000000001, 0.004750000000000006, 0.090250000000000039, 0.047500000000000042, 0.90249999999999997, 0.0025000000000000044, 0.047500000000000042, 0.04525000000000004, 0.85975000000000001, 0.004750000000000006, 0.090250000000000039, 0.007000000000000008, 0.13300000000000003, 0.043000000000000038, 0.81700000000000006],
[0.04514433701657463, 0.85761809392265187, 0.0049799723756906149, 0.092257596685082904, 0.047487569060773518, 0.90226381215469609, 0.0025124309392265238, 0.04773618784530391, 0.04514433701657463, 0.85761809392265187, 0.0049799723756906149, 0.092257596685082904, 0.007099447513812163, 0.13265193370165748, 0.045138121546961368, 0.81511049723756912],
[0.04514433701657463, 0.85761809392265187, 0.0049799723756906149, 0.092257596685082904, 0.047487569060773518, 0.90226381215469609, 0.0025124309392265238, 0.04773618784530391, 0.04514433701657463, 0.85761809392265187, 0.0049799723756906149, 0.092257596685082904, 0.007099447513812163, 0.13265193370165748, 0.045138121546961368, 0.81511049723756912],
[0.026125000000000034, 0.47387500000000027, 0.046375000000000013, 0.45362499999999994, 0.045250000000000047, 0.85975000000000013, 0.004750000000000006, 0.090250000000000039, 0.026125000000000034, 0.47387500000000027, 0.046375000000000013, 0.45362499999999994, 0.025000000000000015, 0.070000000000000048, 0.42999999999999988, 0.4750000000000002],
[0.026125000000000034, 0.47387500000000021, 0.046375, 0.45362499999999989, 0.04525000000000004, 0.85975000000000001, 0.004750000000000006, 0.090250000000000025, 0.026125000000000034, 0.47387500000000021, 0.046375, 0.45362499999999989, 0.025000000000000015, 0.070000000000000048, 0.42999999999999983, 0.4750000000000002],
[0.04525000000000004, 0.85975000000000001, 0.004750000000000006, 0.090250000000000039, 0.047500000000000042, 0.90249999999999997, 0.0025000000000000044, 0.047500000000000042, 0.04525000000000004, 0.85975000000000001, 0.004750000000000006, 0.090250000000000039, 0.007000000000000008, 0.13300000000000003, 0.043000000000000038, 0.81700000000000006],
[0.04525000000000004, 0.85975000000000001, 0.004750000000000006, 0.090250000000000039, 0.047500000000000042, 0.90249999999999997, 0.0025000000000000044, 0.047500000000000042, 0.04525000000000004, 0.85975000000000001, 0.004750000000000006, 0.090250000000000039, 0.007000000000000008, 0.13300000000000003, 0.043000000000000038, 0.81700000000000006],
[0.04525000000000004, 0.85975000000000001, 0.004750000000000006, 0.090250000000000039, 0.047500000000000042, 0.90249999999999997, 0.0025000000000000044, 0.047500000000000042, 0.04525000000000004, 0.85975000000000001, 0.004750000000000006, 0.090250000000000039, 0.007000000000000008, 0.13300000000000003, 0.043000000000000038, 0.81700000000000006],
[0.04525000000000004, 0.85975000000000001, 0.004750000000000006, 0.090250000000000039, 0.047500000000000042, 0.90249999999999997, 0.0025000000000000044, 0.047500000000000042, 0.04525000000000004, 0.85975000000000001, 0.004750000000000006, 0.090250000000000039, 0.007000000000000008, 0.13300000000000003, 0.043000000000000038, 0.81700000000000006],
[0.04514433701657463, 0.85761809392265187, 0.0049799723756906149, 0.092257596685082904, 0.047487569060773518, 0.90226381215469609, 0.0025124309392265238, 0.04773618784530391, 0.04514433701657463, 0.85761809392265187, 0.0049799723756906149, 0.092257596685082904, 0.007099447513812163, 0.13265193370165748, 0.045138121546961368, 0.81511049723756912],
[0.04514433701657463, 0.85761809392265187, 0.0049799723756906149, 0.092257596685082904, 0.047487569060773518, 0.90226381215469609, 0.0025124309392265238, 0.04773618784530391, 0.04514433701657463, 0.85761809392265187, 0.0049799723756906149, 0.092257596685082904, 0.007099447513812163, 0.13265193370165748, 0.045138121546961368, 0.81511049723756912],
[0.026125000000000034, 0.47387500000000027, 0.046375000000000013, 0.45362499999999994, 0.045250000000000047, 0.85975000000000013, 0.004750000000000006, 0.090250000000000039, 0.026125000000000034, 0.47387500000000027, 0.046375000000000013, 0.45362499999999994, 0.025000000000000015, 0.070000000000000048, 0.42999999999999988, 0.4750000000000002],
[0.026125000000000034, 0.47387500000000021, 0.046375, 0.45362499999999989, 0.04525000000000004, 0.85975000000000001, 0.004750000000000006, 0.090250000000000025, 0.026125000000000034, 0.47387500000000021, 0.046375, 0.45362499999999989, 0.025000000000000015, 0.070000000000000048, 0.42999999999999983, 0.4750000000000002],
[0.032955357142857168, 0.61168749999999994, 0.031508928571428611, 0.32384821428571453, 0.046053571428571478, 0.87501785714285729, 0.0039464285714285782, 0.074982142857142928, 0.032955357142857168, 0.61168749999999994, 0.031508928571428611, 0.32384821428571453, 0.0185714285714286, 0.092499999999999999, 0.29178571428571459, 0.59714285714285709],
[0.032955357142857168, 0.61168749999999994, 0.031508928571428604, 0.32384821428571448, 0.046053571428571471, 0.87501785714285707, 0.0039464285714285782, 0.074982142857142914, 0.032955357142857168, 0.61168749999999994, 0.031508928571428604, 0.32384821428571448, 0.018571428571428596, 0.092499999999999999, 0.29178571428571454, 0.59714285714285709],
[0.0072223837209302415, 0.092486918604651205, 0.087515988372093054, 0.81277470930232554, 0.043026162790697715, 0.81749709302325579, 0.0069738372093023342, 0.13250290697674422, 0.0072223837209302415, 0.092486918604651205, 0.087515988372093054, 0.81277470930232554, 0.042790697674418642, 0.0077325581395348928, 0.81249999999999989, 0.13697674418604655],
[0.0072223837209302415, 0.092486918604651205, 0.087515988372093054, 0.81277470930232554, 0.043026162790697715, 0.81749709302325579, 0.0069738372093023342, 0.13250290697674422, 0.0072223837209302415, 0.092486918604651205, 0.087515988372093054, 0.81277470930232554, 0.042790697674418642, 0.0077325581395348928, 0.81249999999999989, 0.13697674418604655]])

#A = np.array([(1,2,3,4),(0,0,0,0),(7,8,9,10),(7,8,9,10.98)])
A=A*10000
before = time.time()
D = independentCols(A)
print 'ramana time',time.time() - before

B = A.T

before = time.time()
C = independentRows(B)
print time.time() - before

print 'numpy',np.linalg.matrix_rank(A)
print C
C = B[C,:]
print 'ramana',D
print C.T

print 'rank',matrixrank(A)


#print A[B,:]
#print B
